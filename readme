Forgot Password
    When user asks to reset their password, make them enter their email address
    Don't indicate if that email address was valid or not (just tell them that an email was dispatched).
    Generate a token (maybe hash a timestamp with a salt) and store it into the database in the user's record.
    Send an email to the user along with a link to your https reset page (token and email address in the url).
    Use the token and email address to validate the user.
    Let them choose a new password, replacing the old one.
    Additionally, it's a good idea to expire those tokens after a certain time frame, usually 24 hours.
    Optionally, record how many "forgot" attempts have happened, and perhaps implement more complex functionality if people are requesting a ton of emails.
    Optionally, record (in a separate table) the IP address of the individual requesting the reset. Increment a throttle system from that IP.

Reasonable Password Policy Example
	password_hash(base64_encode(hash('sha256', $_POST['password'], true)),PASSWORD_DEFAULT)
	Passwords must be at between 12 and 4,096 characters in length.
	Passwords can contain any characters (including Unicode).
	We strongly encourage the use of a password manager like KeePass or KeePassX to generate and store your passwords.

Account Recovery
	having access to a user's email account or cell phone grants an attacker into every application or service they have an account with.
	Allow your users to attach a GnuPG public key to their profile. When an account recovery request is issued for their account, encrypt the account recovery token with their 
	public key so only someone in possession of their private key can access it.

Persistent Authentication Tokens
	just generate a unique token when a user checks the "Remember Me" box 
	store the unique token in a cookie
	have a database table that associates tokens with each user's account 